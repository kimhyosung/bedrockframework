<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%" initialize="this.bootup()" styleName="padded5px" xmlns:misc="com.bedrock.extension.view.misc.*">
	<mx:Script>
		<![CDATA[
			import com.bedrock.extension.controller.ProjectController;
			import com.bedrock.extension.data.OptionData;
			import com.bedrock.framework.plugin.util.XMLUtil2;
			import mx.events.DragEvent;
		
			[Bindable]
			public var selectedNode:XML;
			
			[Embed("assets/MultiContainerIcon.png")]
            private var MultiContainerIcon:Class;
            [Embed("assets/SingleContainerIcon.png")]
            private var SingleContainerIcon:Class;
            
            [Embed("assets/CreateIcon.png")]
            private var CreateIcon:Class;
            [Embed("assets/DeleteIcon.png")]
            private var DeleteIcon:Class;
            [Embed("assets/UpdateIcon.png")]
            private var UpdateIcon:Class;
             [Embed("assets/DeselectIcon.png")]
            private var DeselectIcon:Class;
            [Embed("assets/RefreshIcon.png")]
            private var RefreshIcon:Class;
 
			public function bootup():void
			{
			}
            /*
			Node
			*/
            private function createNode():void
            {
				this.createContainer();
				this.resetInterface();
            }
            private function deleteNode():void
            {
            	if ( this.selectedNode != null ) {
	            	this.deleteContainer();
            	}
            	this.resetInterface();
            }
            /*
			Container
			*/
            private function createContainer():void
            {
            	if ( this.containerIDText.text != "" ) {
            		if ( this.parentCombo.selectedItem == OptionData.ROOT ) {
	            		ProjectController.getInstance().config.containers.appendChild( <container id={ this.containerIDText.text } /> );
            		} else {
	            		var xmlParent:XML = ProjectController.getInstance().config.containers..container.( @id == this.parentCombo.selectedLabel )[ 0 ];
	            		xmlParent.appendChild( <container id={ this.containerIDText.text } /> );
            		}
            		ProjectController.getInstance().config.autoSaveConfig();
           		 }
            }
            private function deleteContainer():void
            {
            	delete ProjectController.getInstance().config.containers..container.( @id == this.selectedNode.@id )[ 0 ];
            	ProjectController.getInstance().config.refreshContainerHierarchy();
            }
            /*
			Attributes
			*/
            private function createAttribute():void
            {
                this.selectedNode.@[ this.attributeEditor.nameText.text ] = this.attributeEditor.valueText.text;
                this.attributeEditor.resetForm();
            }
            public function updateAttribute():void
            {
				this.selectedNode.@[ this.attributeEditor.attributeGrid.selectedItem.name ] = this.attributeEditor.valueText.text;
                this.attributeEditor.resetForm();
            }
            public function deleteAttribute():void
            {
            	delete this.selectedNode.@[ this.attributeEditor.attributeGrid.selectedItem.name ];
                this.attributeEditor.resetForm();
            }
            /*
            Interface Functions
            */
            private function resetInterface():void
			{
				ProjectController.getInstance().config.autoSaveConfig();
				this.containerIDText.text = "";
				this.selectedNode = null;
				this.attributeEditor.resetForm();
				this.attributeEditor.updateForm();
			}
			private function deselect():void
			{
				this.nodeTree.selectedItem = null;
				this.selectedNode = null;
				this.attributeEditor.resetForm();
            }
			/*
			Event Handlers
			*/
            private function onTreeSelect( $event:Event ):void
			{
                this.selectedNode = this.nodeTree.selectedItem as XML;
				this.attributeEditor.populateForm();
				switch ( String( this.selectedNode.@id ) ) {
					case "preloader" :
					case "overlay" :
						this.hierarchyControlBar.nodeDeleteButton.enabled = false;
						break;
					default :
						this.hierarchyControlBar.nodeDeleteButton.enabled = true;
						break;
				}
            }
            private function onDragStop( $event:DragEvent ):void
			{
                ProjectController.getInstance().config.reorderContainers( ProjectController.getInstance().config.containerHierarchy.source.toString() );
            }
		]]>
	</mx:Script>
	
	
	<mx:VBox width="100%" height="100%">
		<mx:Panel title="Create : Container" layout="horizontal" width="100%">
		
			<mx:VBox width="100%">
				<mx:FormItem label="ID">
					<mx:TextInput id="containerIDText" restrict="a-z A-Z 0-9 _"/>
				</mx:FormItem>
			</mx:VBox>
			<mx:VBox width="100%">
				<mx:FormItem label="Parent" width="100%">
					<mx:ComboBox id="parentCombo" dataProvider="{ ProjectController.getInstance().config.containerArray }" />
				</mx:FormItem>
			</mx:VBox>
			
			<mx:ControlBar width="100%">
				<mx:Button click="this.createNode()" id="nodeCreateButton" styleName="createIcon" icon="{ CreateIcon }"/>
			</mx:ControlBar>
			
		</mx:Panel>
		
		<mx:Panel  title="Hierarchy" width="100%" height="100%">
			<mx:AdvancedDataGrid id="nodeTree" designViewDataType="tree" dragComplete="this.onDragStop( event )" dragEnabled="true" dropEnabled="true" dragMoveEnabled="true"  displayItemsExpanded="true" sortExpertMode="true" width="100%" height="100%" dataProvider="{ ProjectController.getInstance().config.containerHierarchy }" defaultLeafIcon="{ SingleContainerIcon }" folderOpenIcon="{ MultiContainerIcon }" folderClosedIcon="{ MultiContainerIcon }" itemClick="this.onTreeSelect( event )">
				<mx:headerRenderer>
					<mx:Component>
						<mx:AdvancedDataGridHeaderRenderer horizontalAlign="left"/>
					</mx:Component>
		        </mx:headerRenderer>
				<mx:columns>
					<mx:AdvancedDataGridColumn headerText="ID" dataField="@id" sortable="false" />
				</mx:columns>
			</mx:AdvancedDataGrid>
			<!--<mx:Tree id="nodeTree" width="100%" height="100%" showRoot="false" labelField="@id" dataProvider="{ ApplicationController.getInstance().config.containers }" itemClick="this.onTreeSelect(event)" defaultLeafIcon="{ SingleContainerIcon }" folderOpenIcon="{ MultiContainerIcon }" folderClosedIcon="{ MultiContainerIcon }" />-->
			<misc:HierarchyControlBar id="hierarchyControlBar" deleteNode="this.deleteNode()" deselectNode="this.deselect()" />
		</mx:Panel>
		
	</mx:VBox>
	
	<misc:AttributeEditor id="attributeEditor" selectedNode="{ this.selectedNode }" createAttribute="this.createAttribute()" updateAttribute="this.updateAttribute()" deleteAttribute="this.deleteAttribute()"/>
	
</mx:HBox>
