<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"  creationComplete="this._initialize()" xmlns:view="com.bedrock.project.extension.view.*" styleName="padded5px" xmlns:misc="com.bedrock.extension.view.misc.*">
	<mx:Script>
		<![CDATA[
			import com.bedrock.framework.engine.data.BedrockData;
			import com.bedrock.framework.plugin.storage.HashMap;
			import mx.controls.advancedDataGridClasses.AdvancedDataGridColumn;
			import mx.events.ListEvent;
			import com.bedrock.framework.Bedrock;
			import com.bedrock.extension.event.ExtensionEvent;
			import mx.managers.PopUpManager;
			import com.bedrock.extension.view.popups.PatternCreationView;
			import com.bedrock.extension.view.popups.VariableCreationView;
			import com.bedrock.extension.view.popups.SettingCreationView;
			import com.bedrock.extension.view.popups.PathCreationView;
			import com.bedrock.extension.view.popups.EnvironmentCreationView;
			import com.bedrock.extension.controller.ProjectController;
			import mx.collections.HierarchicalData;
			import mx.collections.ArrayCollection;
			import com.bedrock.framework.plugin.util.XMLUtil2;
			/*
			Variable Delcarations
			*/
			private var _environmentCreationView:EnvironmentCreationView;
			private var _patternCreationView:PatternCreationView;
			private var _pathCreationView:PathCreationView;
			private var _settingCreationView:SettingCreationView;
			private var _variableCreationView:VariableCreationView;
			
			private var _environmentSlides:HashMap;
            
			private function _initialize():void
			{
				this._createEnvironmentSlides();
				
				this._environmentCreationView = new EnvironmentCreationView;
				this._environmentCreationView.initialize();
				this._patternCreationView = new PatternCreationView;
				this._patternCreationView.initialize();
				this._pathCreationView = new PathCreationView;
				this._pathCreationView.initialize();
				this._settingCreationView = new SettingCreationView;
				this._settingCreationView.initialize();
				this._variableCreationView = new VariableCreationView;
				this._variableCreationView.initialize();
				
				Bedrock.dispatcher.addEventListener( ExtensionEvent.CONFIG_LOADED, this._onConfigLoaded );
			}
			private function _createEnvironmentSlides():void
			{
				this._environmentSlides = new HashMap;
				var environmentView:SingleEnvironmentView;
				this.environmentAccordion.removeAllChildren();
				var environmentXML:XML;
				
				for each ( var id:String in ProjectController.instance.config.environmentIDs.source ) {
					environmentXML = ProjectController.instance.config.environments..environment.( @id == id )[ 0 ];
					environmentView = new SingleEnvironmentView;
					environmentView.initialize();
					environmentView.label = id;
					environmentView.id = id;
					this._environmentSlides.saveValue( id, environmentView );
					environmentView.nodeTree.addEventListener( ListEvent.ITEM_CLICK, this._onTreeSelect );
					environmentAccordion.addChild( environmentView );
				}
				
				this._update();
			}
			/*
			Creation Functions
			*/
			private function createNode():void
            {
            	switch( this.hierarchyControlBar.creationCombo.selectedItem.value ) {
            		case "environment" :
            			this._environmentCreationView.populate();
            			break;
            		case "pattern" :
            			this._patternCreationView.populate( SingleEnvironmentView( this.environmentAccordion.selectedChild ).id  );
            			break;
            		case "setting" :
            			this._settingCreationView.populate( SingleEnvironmentView( this.environmentAccordion.selectedChild ).id );
            			break;
            		case "path" :
            			this._pathCreationView.populate( SingleEnvironmentView( this.environmentAccordion.selectedChild ).id );
            			break;
            		case "variable" :
            			this._variableCreationView.populate( SingleEnvironmentView( this.environmentAccordion.selectedChild ).id );
            			break;
            	}
            }
            private function deleteNode():void
            {
            	if ( SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedIndex != -1 ) {
            		switch( String( SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedItem.name() ) ) {
	            		case "pattern" :
	            			this.deletePattern();
	            			break;
	            		case "setting" :
	            			this.deleteSetting();
	            			break;
	            		case "path" :
	            			this.deletePath();
	            			break;
	            		case "variable" :
	            			this.deleteVariable();
	            			break;
            		}
	            	ProjectController.instance.config.autoSaveConfig();
	            	this.attributeEditor.clearForm();
            	} else {
	            	var id:String = SingleEnvironmentView( this.environmentAccordion.selectedChild ).id;
	            	if ( id != BedrockData.DEFAULT && id != BedrockData.PRODUCTION ) {
	        			this.deleteEnvironment();
		            	this.attributeEditor.clearForm();
		            	ProjectController.instance.config.autoSaveConfig();
	            	}
            	}
            }
            /*
            Environments
            */
            private function deleteEnvironment():void
            {
            	delete ProjectController.instance.config.environments..environment.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).id )[ 0 ];
            }
            private function deletePattern():void
            {
            	var environmentXML:XML = ProjectController.instance.config.environments..environment.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).id )[ 0 ];
            	delete environmentXML..pattern.( @value == SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedItem.@value )[ 0 ];
            }
            private function deleteSetting():void
            {
            	var environmentXML:XML = ProjectController.instance.config.environments..environment.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).id )[ 0 ];
            	delete environmentXML..setting.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedItem.@id )[ 0 ];
            }
            private function deletePath():void
            {
            	var environmentXML:XML = ProjectController.instance.config.environments..environment.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).id )[ 0 ];
            	delete environmentXML..path.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedItem.@id )[ 0 ];
            }
            private function deleteVariable():void
            {
            	var environmentXML:XML = ProjectController.instance.config.environments..environment.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).id )[ 0 ];
            	delete environmentXML..variable.( @id == SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedItem.@id )[ 0 ];
            }
            /*
            Interface Functions
            */
			private function _deselect():void
			{
				 SingleEnvironmentView( this.environmentAccordion.selectedChild ).deselect(); 
				this.attributeEditor.clearForm();
            }
			private function _update():void
			{
				 var environmentXML:XML;
				var slides:Array = this._environmentSlides.getValues();
				for each ( var slide:SingleEnvironmentView in slides ) {
					environmentXML = ProjectController.instance.config.environments..environment.( @id == slide.id )[ 0 ];
					slide.nodeTree.dataProvider = new HierarchicalData( environmentXML.children() );
					slide.update();
				} 
            }
            
            /*
			Event Handlers
			*/
			private function _onConfigLoaded( $event:ExtensionEvent ):void
			{
				if ( ProjectController.instance.config.environmentIDs.length != this._environmentSlides.size ) {
					this._createEnvironmentSlides();
				}
				this._update();
            }
            private function _onTreeSelect( $event:Event ):void
			{
				this.attributeEditor.populateForm( SingleEnvironmentView( this.environmentAccordion.selectedChild ).nodeTree.selectedItem as XML );
            }
		]]>
	</mx:Script>
	<mx:Panel width="100%" height="100%" layout="vertical" title="Hierarchy" >
		<mx:Accordion width="100%" height="100%" id="environmentAccordion"/>
		<misc:HierarchyControlBar id="hierarchyControlBar" creationOptions="{ ProjectController.instance.resources.getBundle( 'environmentCreationOptions' ) }" createNode="this.createNode()" deleteNode="this.deleteNode()" deselectNode="this._deselect()" />
	</mx:Panel>		
	
	<misc:AttributeEditor id="attributeEditor" title="Attribute Editor" />
		
</mx:HDividedBox>