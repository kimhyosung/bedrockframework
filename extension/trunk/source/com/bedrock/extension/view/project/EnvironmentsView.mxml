<?xml version="1.0" encoding="utf-8"?>
<mx:HDividedBox xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"  creationComplete="this.bootup()" xmlns:view="com.bedrock.project.extension.view.*" styleName="padded5px" xmlns:misc="com.bedrock.extension.view.misc.*">
	<mx:Script>
		<![CDATA[
			import com.bedrock.framework.Bedrock;
			import com.bedrock.extension.event.ExtensionEvent;
			import mx.managers.PopUpManager;
			import com.bedrock.extension.view.popups.PatternCreationView;
			import com.bedrock.extension.view.popups.VariableCreationView;
			import com.bedrock.extension.view.popups.SettingCreationView;
			import com.bedrock.extension.view.popups.PathCreationView;
			import com.bedrock.extension.view.popups.EnvironmentCreationView;
			import com.bedrock.extension.controller.ProjectController;
			import mx.collections.HierarchicalData;
			import mx.collections.ArrayCollection;
			import com.bedrock.framework.plugin.util.XMLUtil2;
			/*
			Variable Delcarations
			*/
            [Embed("assets/SettingIcon.png")]
            private var SettingIcon:Class;
            [Embed("assets/VariableIcon.png")]
            private var VariableIcon:Class;
            [Embed("assets/PathIcon.png")]
            private var PathIcon:Class;
            [Embed("assets/PatternIcon.png")]
            private var PatternIcon:Class;
            [Embed("assets/EnvironmentIcon.png")]
            private var EnvironmentIcon:Class;
            
			private var _environmentCreationView:EnvironmentCreationView;
			private var _patternCreationView:PatternCreationView;
			private var _pathCreationView:PathCreationView;
			private var _settingCreationView:SettingCreationView;
			private var _variableCreationView:VariableCreationView;
            
			public function bootup():void
			{
				this._applyIcons();
				
				this._environmentCreationView = new EnvironmentCreationView;
				this._environmentCreationView.initialize();
				this._patternCreationView = new PatternCreationView;
				this._patternCreationView.initialize();
				this._pathCreationView = new PathCreationView;
				this._pathCreationView.initialize();
				this._settingCreationView = new SettingCreationView;
				this._settingCreationView.initialize();
				this._variableCreationView = new VariableCreationView;
				this._variableCreationView.initialize();
				
				Bedrock.dispatcher.addEventListener( ExtensionEvent.CONFIG_LOADED, this._onConfigLoaded );
			}
			
			/*
			Creation Functions
			*/
			private function createNode():void
            {
            	switch( this.hierarchyControlBar.creationCombo.selectedItem.value ) {
            		case "environment" :
            			this._environmentCreationView.populate();
            			break;
            		case "pattern" :
            			this._patternCreationView.populate( this.nodeTree.selectedItem as XML );
            			break;
            		case "setting" :
            			this._settingCreationView.populate( this.nodeTree.selectedItem as XML );
            			break;
            		case "path" :
            			this._pathCreationView.populate( this.nodeTree.selectedItem as XML );
            			break;
            		case "variable" :
            			this._variableCreationView.populate( this.nodeTree.selectedItem as XML );
            			break;
            	}
            }
            private function deleteNode():void
            {
            	if ( this.nodeTree.selectedIndex != -1 ) {
            		switch( String( this.nodeTree.selectedItem.name() ) ) {
            			case "environment" :
            			this.deleteEnvironment();
            			break;
            		case "pattern" :
            			this.deletePattern();
            			break;
            		case "setting" :
            			this.deleteSetting();
            			break;
            		case "path" :
            			this.deletePath();
            			break;
            		case "variable" :
            			this.deleteVariable();
            			break;
            		}
	            	ProjectController.getInstance().config.autoSaveConfig();
	            	this.attributeEditor.clearForm();
            	}
            }
            /*
            Environments
            */
            private function deleteEnvironment():void
            {
            	delete ProjectController.getInstance().config.environments..environment.( @id == this.nodeTree.selectedItem.@id )[ 0 ];
            }
            private function deletePattern():void
            {
            	delete ProjectController.getInstance().config.environments..pattern.( @value == this.nodeTree.selectedItem.@value )[ 0 ];
            }
            private function deleteSetting():void
            {
            	delete ProjectController.getInstance().config.environments..setting.( @id == this.nodeTree.selectedItem.@id )[ 0 ];
            }
            private function deletePath():void
            {
            	delete ProjectController.getInstance().config.environments..path.( @id == this.nodeTree.selectedItem.@id )[ 0 ];
            }
            private function deleteVariable():void
            {
            	delete ProjectController.getInstance().config.environments..variable.( @id == this.nodeTree.selectedItem.@id )[ 0 ];
            }
            /*
            Interface Functions
            */
			private function _deselect():void
			{
				this.nodeTree.selectedItem = null;
				this.attributeEditor.clearForm();
            }
            private function _applyIcons():void
            {
            	var xmlItem:XML;
				for each ( xmlItem in ProjectController.getInstance().config.environments..setting ) {
					this.nodeTree.setItemIcon( xmlItem, SettingIcon, SettingIcon );
				}
				for each ( xmlItem in ProjectController.getInstance().config.environments..variable ) {
					this.nodeTree.setItemIcon( xmlItem, VariableIcon, VariableIcon );
				}
				for each ( xmlItem in ProjectController.getInstance().config.environments..path ) {
					this.nodeTree.setItemIcon( xmlItem, PathIcon, PathIcon );
				}
				for each ( xmlItem in ProjectController.getInstance().config.environments..pattern ) {
					this.nodeTree.setItemIcon( xmlItem, PatternIcon, PatternIcon );
				}
            }
            
            private function _getLabel( $item:Object, $column:AdvancedDataGridColumn):String
			{
				var strLabel:String = String( $item.@id );
            	if ( strLabel == null || strLabel == "" ) {
            		strLabel = $item.name();
            	}
            	return strLabel;
			}
            /*
			Event Handlers
			*/
			private function _onConfigLoaded( $event:ExtensionEvent ):void
			{
                this._applyIcons();
            }
            private function _onTreeSelect( $event:Event ):void
			{
				this.attributeEditor.populateForm( this.nodeTree.selectedItem as XML );
            }
		]]>
	</mx:Script>
	<mx:Panel width="100%" height="100%" layout="vertical" title="Hierarchy" >
		<mx:AdvancedDataGrid id="nodeTree" designViewDataType="tree" displayItemsExpanded="true" sortExpertMode="true" width="100%" height="100%" dataProvider="{ new HierarchicalData( ProjectController.getInstance().config.environments..environment ) }" defaultLeafIcon="{ EnvironmentIcon }" folderOpenIcon="{ EnvironmentIcon }" folderClosedIcon="{ EnvironmentIcon }" itemClick="this._onTreeSelect( event )">
			<mx:headerRenderer>
				<mx:Component>
					<mx:AdvancedDataGridHeaderRenderer horizontalAlign="left"/>
				</mx:Component>
	        </mx:headerRenderer>
			<mx:columns>
				<mx:AdvancedDataGridColumn headerText="ID" labelFunction="_getLabel" sortable="false" />
				<mx:AdvancedDataGridColumn headerText="Value" dataField="@value" sortable="false" />
			</mx:columns>
		</mx:AdvancedDataGrid>
		<misc:HierarchyControlBar id="hierarchyControlBar" creationOptions="{ ProjectController.getInstance().resources.getBundle( 'environmentCreationOptions' ) }" createNode="this.createNode()" deleteNode="this.deleteNode()" deselectNode="this._deselect()" />
	</mx:Panel>		
	
	<misc:AttributeEditor id="attributeEditor" title="Editing : { this.nodeTree.selectedItem.@id }" />
		
</mx:HDividedBox>