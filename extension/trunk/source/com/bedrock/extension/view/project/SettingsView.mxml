<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" styleName="padded5px" creationComplete="this.bootup()" horizontalAlign="center">
	<mx:Script>
		<![CDATA[
			import com.bedrock.extension.model.ConfigModel;
			import com.bedrock.extension.model.ConfigSettingsProxy;
			import com.bedrock.framework.plugin.util.ArrayUtil;
			import mx.collections.ArrayCollection;
			import com.bedrock.extension.controller.ProjectController;
			import com.bedrock.framework.plugin.util.XMLUtil2;
			import com.bedrock.framework.engine.data.BedrockData;
			import com.bedrock.framework.core.logging.LogLevel;
			import mx.containers.FormItem;
			import mx.controls.Alert;
			import com.bedrock.framework.engine.data.BedrockData;
			/*
			Variable Delcarations
			*/
			private var _behaviorCheckBoxes:ArrayCollection;
			private var _resourceCheckBoxes:ArrayCollection;
			private var _settingsProxy:ConfigSettingsProxy;
			/*
			Constructor
			*/
			private function bootup():void
			{
				this._settingsProxy = new ConfigSettingsProxy( ProjectController.getInstance().config );
				
				this.populate();
				this._behaviorCheckBoxes = new ArrayCollection( this._createOptions( "behaviorSettings", this.behaviorSettingsForm ) );
				this._resourceCheckBoxes = new ArrayCollection( this._createOptions( "resourceSettings", this.resourceSettingsForm ) ); 
			}
			/*
			Creation Functions
			*/
			private function _createOptions( $bundleID:String, $form:Form ):Array
			{
				var objCheckBox:CheckBox;
				var arrResult:Array = ProjectController.getInstance().resources.getBundle( $bundleID );
				for each( var objOption:Object in arrResult ) {
					objCheckBox = new CheckBox;
					objCheckBox.id = objOption.id + "Check";
					objCheckBox.label = objOption.label;
					objCheckBox.selected = ProjectController.getInstance().config.getSettingValue( objOption.id );
					objCheckBox.addEventListener( Event.CHANGE, this._onChange );
					
					objOption.check = objCheckBox;
					$form.addChild( objCheckBox );
				}
				return arrResult;
			}
			private function populate():void
			{
				this.stageAlignmentCombo.dataProvider = ProjectController.getInstance().resources.getBundle( "stageAlignmentOptions" );
				this.stageAlignmentCombo.selectedIndex = this._findIndexInBundle( "stageAlignmentOptions", this._settingsProxy.stageAlignment );
				this.stageScaleModeCombo.dataProvider = ProjectController.getInstance().resources.getBundle( "stageScaleModeOptions" );
				this.stageScaleModeCombo.selectedIndex = this._findIndexInBundle( "stageScaleModeOptions", this._settingsProxy.stageScaleMode );
				this.defaultTransitionStyleCombo.dataProvider = ProjectController.getInstance().resources.getBundle( "defaultTransitionStyleOptions" );
				this.defaultTransitionStyleCombo.selectedIndex = this._findIndexInBundle( "defaultTransitionStyleOptions", this._settingsProxy.defaultTransitionStyle );
				
				this.initialPreloaderTimeStepper.value = this._settingsProxy.initialPreloaderTime;
				this.defaultPreloaderTimeStepper.value = this._settingsProxy.defaultPreloaderTime;
				this.blockerAlphaStepper.value = this._settingsProxy.blockerAlpha;
				this.blockerColorPicker.selectedColor = this._settingsProxy.blockerColor;
				
				this.localesEnabledCheck.selected = this._settingsProxy.localesEnabled;
				this.defaultLocaleCombo.selectedIndex = this._findIndexInXML( this._settingsProxy.defaultLocale, ProjectController.getInstance().config.locales..locale );
				this.localeDelimiterText.text = this._settingsProxy.localeDelimiter;
				
				var strLocalizedFiles:String = this._settingsProxy.localizedFiles;
				this.fontsCheck.selected = ( strLocalizedFiles.indexOf( BedrockData.FONTS ) != -1 );
				this.stylesheetCheck.selected = ( strLocalizedFiles.indexOf( BedrockData.STYLESHEET ) != -1 );
				this.libraryCheck.selected = ( strLocalizedFiles.indexOf( BedrockData.LIBRARY ) != -1 );
				this.dataBundleCheck.selected = ( strLocalizedFiles.indexOf( BedrockData.DATA_BUNDLE ) != -1 );
				
				this.logDetailDepthStepper.value = this._settingsProxy.logDetailDepth;
				this.errorsEnabledCheck.selected = this._settingsProxy.errorsEnabled;
				
				var arrLogLevels:Array = ProjectController.getInstance().resources.getBundle( "logOptions" );
				this.traceLogLevelCombo.dataProvider = arrLogLevels;
				this.traceLogLevelCombo.selectedIndex = this._findIndexInArray( arrLogLevels, this._settingsProxy.traceLogLevel );
				this.eventLogLevelCombo.dataProvider = arrLogLevels;
				this.eventLogLevelCombo.selectedIndex = this._findIndexInArray( arrLogLevels, this._settingsProxy.eventLogLevel );
				this.monsterLogLevelCombo.dataProvider = arrLogLevels;
				this.monsterLogLevelCombo.selectedIndex = this._findIndexInArray( arrLogLevels, this._settingsProxy.monsterLogLevel );
				this.remoteLogLevelCombo.dataProvider = arrLogLevels;
				this.remoteLogLevelCombo.selectedIndex = this._findIndexInArray( arrLogLevels, this._settingsProxy.remoteLogLevel );
				
				this.remoteLogURLText.text = this._settingsProxy.remoteLogURL;
				
				this.filenameFontsText.text = this._settingsProxy.fontsFilename;
				this.filenameDataBundleText.text = this._settingsProxy.dataBundleFilename;
				this.filenameLibraryText.text = this._settingsProxy.libraryFilename;
				this.filenameStylesheetText.text = this._settingsProxy.stylesheetFilename;
			}
			
			private function updateSettings():void
			{
				this.applyGeneralSettings();
				this.applyLocaleSettings();
				this.applyBehaviorSettings();
				this.applyResourceSettings();
				this.applyLoggerSettings();
				this.applyFilenameSettings();
				ProjectController.getInstance().config.autoSaveConfig();
			}
			
			private function applyGeneralSettings():void
			{
				this._settingsProxy.stageAlignment = this.stageAlignmentCombo.selectedLabel;
				this._settingsProxy.stageScaleMode = this.stageScaleModeCombo.selectedLabel;
				this._settingsProxy.defaultTransitionStyle = this.defaultTransitionStyleCombo.selectedLabel;
				this._settingsProxy.initialPreloaderTime = this.initialPreloaderTimeStepper.value;
				this._settingsProxy.defaultPreloaderTime = this.defaultPreloaderTimeStepper.value;
				this._settingsProxy.blockerAlpha = this.blockerAlphaStepper.value;
				this._settingsProxy.blockerColor = this.blockerColorPicker.selectedColor;
			}
			private function applyBehaviorSettings():void
			{
				for each( var objOption:Object in this._behaviorCheckBoxes.source ) {
					ProjectController.getInstance().config.setSettingValue( objOption.id, objOption.check.selected );
				}
			}
			private function applyResourceSettings():void
			{
				for each( var objOption:Object in this._resourceCheckBoxes.source ) {
					ProjectController.getInstance().config.setSettingValue( objOption.id, objOption.check.selected );
				}
			}
			private function applyLocaleSettings():void
			{
				this._settingsProxy.localesEnabled = this.localesEnabledCheck.selected;
				this._settingsProxy.localeDelimiter = this.localeDelimiterText.text;
				this._settingsProxy.defaultLocale = this.defaultLocaleCombo.selectedItem.@id;
				
				var arrLocalizedFiles:Array = new Array;
				if ( this.fontsCheck.selected ) arrLocalizedFiles.push( BedrockData.FONTS );
				if ( this.stylesheetCheck.selected ) arrLocalizedFiles.push( BedrockData.STYLESHEET );
				if ( this.libraryCheck.selected ) arrLocalizedFiles.push( BedrockData.LIBRARY );
				if ( this.dataBundleCheck.selected ) arrLocalizedFiles.push( BedrockData.DATA_BUNDLE );
				
				this._settingsProxy.localizedFiles = arrLocalizedFiles.toString();
			}
			private function applyFilenameSettings():void
			{
				this._settingsProxy.libraryFilename = this.filenameLibraryText.text;
				this._settingsProxy.libraryFilename = this.filenameLibraryText.text;
				this._settingsProxy.fontsFilename = this.filenameFontsText.text;
				this._settingsProxy.stylesheetFilename = this.filenameStylesheetText.text;
				this._settingsProxy.dataBundleFilename = this.filenameDataBundleText.text;
			}
			private function applyLoggerSettings():void
			{
				this._settingsProxy.logDetailDepth = this.logDetailDepthStepper.value;
				this._settingsProxy.errorsEnabled = this.errorsEnabledCheck.selected;
				
				this._settingsProxy.traceLogLevel = this.traceLogLevelCombo.selectedLabel;
				this._settingsProxy.eventLogLevel = this.eventLogLevelCombo.selectedLabel;
				this._settingsProxy.remoteLogLevel = this.remoteLogLevelCombo.selectedLabel;
				this._settingsProxy.monsterLogLevel = this.monsterLogLevelCombo.selectedLabel;
			}
			/*
			Event Handlers
			*/
			private function _onChange( $event:Event ):void
			{
				this.updateSettings();
			}
			
			
			
			private function _findIndexInBundle( $bundle:String, $id:String ):int
			{
				return this._findIndexInArray( ProjectController.getInstance().resources.getBundle( $bundle ), $id );
			}
			private function _findIndexInArray( $array:Array, $id:String ):int
			{
				return ArrayUtil.findIndex( $array, $id );
			}
			private function _findIndexInXML( $id:String, $list:XMLList ):int
			{
				var i:int;
				var xmlList:XML = XMLUtil2.sanitizeXML( $list );
				for each( var xmlItem:XML in $list ) {
					if ( xmlItem.@id == $id ) {
						return i;
					}
					++i;
				}
				return -1;
			}
		]]>
	</mx:Script>
	<mx:HBox>
		
		
		<mx:VBox height="100%">
			<mx:Panel layout="vertical" title="General Settings" width="100%" height="50%">
				<mx:Form id="generalSettingsForm">
					<mx:FormItem label="Stage Alignment" width="100%">
						<mx:ComboBox id="stageAlignmentCombo" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Stage Scale Mode" width="100%">
						<mx:ComboBox id="stageScaleModeCombo" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Default Transition Style" width="100%">
						<mx:ComboBox id="defaultTransitionStyleCombo" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Initial Preloader Time">
						<mx:NumericStepper id="initialPreloaderTimeStepper" stepSize="0.1" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Default Preloader Time">
						<mx:NumericStepper id="defaultPreloaderTimeStepper" stepSize="0.1" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Blocker Alpha">
						<mx:NumericStepper id="blockerAlphaStepper" change="this._onChange( event )" stepSize="0.1" minimum="0" maximum="1"/>
					</mx:FormItem>
					<mx:FormItem label="Blocker Color">
						<mx:ColorPicker id="blockerColorPicker" change="this._onChange( event )" selectedColor="#000000"/>
					</mx:FormItem>
				</mx:Form>
			</mx:Panel>
			
			<mx:Panel layout="vertical" title="Locale Settings" width="100%" height="100%">
		  		<mx:Form width="100%" height="100%">
		  			<mx:FormItem label="Locales Enabled">
						<mx:CheckBox id="localesEnabledCheck" selected="false" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Locale Delimiter">
						<mx:TextInput id="localeDelimiterText" width="100%" text="_" maxChars="1" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Default Locale">
						<mx:ComboBox id="defaultLocaleCombo" dataProvider="{ ProjectController.getInstance().config.locales..locale }" labelField="@id"  change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Localized Files">
						<mx:CheckBox id="libraryCheck" label="Library" change="this._onChange( event )"/>
						<mx:CheckBox id="fontsCheck" label="Fonts" change="this._onChange( event )"/>
						<mx:CheckBox id="stylesheetCheck" label="Stylesheet" change="this._onChange( event )"/>
						<mx:CheckBox id="dataBundleCheck" label="Resource Bundle" change="this._onChange( event )"/>
					</mx:FormItem>
				</mx:Form>
			</mx:Panel>
			
		</mx:VBox>
		
		<mx:VBox height="100%">
			
			<mx:Panel layout="vertical" title="Behavior Settings" height="100%" width="100%">
				<mx:Form id="behaviorSettingsForm"/>
			</mx:Panel>
			<mx:Panel layout="vertical" title="Resource Settings" width="100%" height="100%">
				<mx:Form id="resourceSettingsForm"/>
			</mx:Panel>
			
		</mx:VBox>
		
		
		<mx:VBox height="100%">
			<mx:Panel layout="vertical" title="Logger Settings" width="100%" height="100%">
		  		<mx:Form width="100%" height="100%">
		  			<mx:FormItem label="Log Detail Depth">
						<mx:NumericStepper id="logDetailDepthStepper" minimum="0" stepSize="1" maximum="25" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Errors Enabled">
						<mx:CheckBox id="errorsEnabledCheck" selected="true" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:HRule width="100%" />
					<mx:FormItem label="Trace Log Level">
						<mx:ComboBox id="traceLogLevelCombo" labelField="label" change="this._onChange( event )" />
					</mx:FormItem>
					<mx:FormItem label="Event Log Level">
						<mx:ComboBox id="eventLogLevelCombo" labelField="label" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Monster Log Level">
						<mx:ComboBox id="monsterLogLevelCombo" labelField="label" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Remote Log Level">
						<mx:ComboBox id="remoteLogLevelCombo" labelField="label" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Remote Log URL" width="100%">
						<mx:TextInput id="remoteLogURLText"  width="125" change="this._onChange( event )"/>
					</mx:FormItem>
				</mx:Form>
			</mx:Panel>
			
			
			<mx:Panel layout="vertical" title="Resource Filenames" width="100%" height="100%">
				<mx:Form width="100%" height="100%">
					<mx:FormItem label="Library">
						<mx:TextInput width="125" id="filenameLibraryText" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Fonts">
						<mx:TextInput width="125" id="filenameFontsText" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Stylesheet">
						<mx:TextInput width="125" id="filenameStylesheetText" change="this._onChange( event )"/>
					</mx:FormItem>
					<mx:FormItem label="Data Bundle">
						<mx:TextInput width="125" id="filenameDataBundleText" change="this._onChange( event )"/>
					</mx:FormItem>
				</mx:Form>
			</mx:Panel>
			
		</mx:VBox>
		
	</mx:HBox>
</mx:HBox>
