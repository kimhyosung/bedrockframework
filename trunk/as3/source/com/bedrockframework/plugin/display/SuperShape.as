package com.bedrockframework.plugin.display{	import com.bedrockframework.core.base.SpriteWidget;	import com.bedrockframework.plugin.data.SuperShapeData;	import com.bedrockframework.plugin.util.MathUtil;		import flash.events.Event;	import flash.geom.Matrix;	import flash.geom.Rectangle;	public class SuperShape extends SpriteWidget	{		private var _objData:SuperShapeData;				public function SuperShape()		{		}		/*		Initialize		*/		public function initialize($data:SuperShapeData):void		{			this._objData = $data;			this._objData.rectangle = (this._objData.rectangle != null) ? this._objData.rectangle : new Rectangle(0, 0, this._objData.width, this._objData.height);			this._objData.matrix =  (this._objData.rotation != 0 && this._objData.matrix == null) ? this.getMatrix() : this._objData.matrix;						if (this._objData.matchStageSize) {				this.stage.addEventListener(Event.RESIZE, this.onResize);				this.draw(this.getStageRectangle());			} else  {				this.draw(this._objData.rectangle);			}		}		public function clear():void		{			this.stage.removeEventListener(Event.RESIZE, this.onResize);		}		private function getMatrix():Matrix		{			var objMatrix:Matrix = new Matrix();			objMatrix.createGradientBox(this._objData.rectangle.width, this._objData.rectangle.height, MathUtil.degreesToRadians(this._objData.rotation));			return objMatrix;		}		/*		Draw the Shape		*/		public function draw($rectangle:Rectangle):void		{			this.graphics.clear();						switch (this._objData.type) {				case SuperShapeData.FILL :					this.graphics.beginFill(this._objData.fillColor, this._objData.alpha);					break;				case SuperShapeData.BITMAP :					this.graphics.beginBitmapFill(this._objData.bitmapData, this._objData.matrix,this._objData.repeat, this._objData.smooth);					break;				case SuperShapeData.GRADIENT :										this.graphics.beginGradientFill(this._objData.gradientType, this._objData.colors, this._objData.alphas, this._objData.ratios, this._objData.matrix, this._objData.spreadMethod, this._objData.interpolationMethod, this._objData.focalPointRatio);					break;			}						this.graphics.drawRect($rectangle.x, $rectangle.y, $rectangle.width, $rectangle.height);			this.graphics.endFill();		}		/*		Get Stage rectangle	 	*/	 	private function getStageRectangle():Rectangle		{			return new Rectangle(0, 0, this.stage.stageWidth, this.stage.stageHeight);		}		/*		Property Definitions		*/		public function set data($data:SuperShapeData):void		{			this.initialize($data);		}		public function get data():SuperShapeData		{			return this._objData;		}				override public function set width( $width:Number ):void		{			this._objData.rectangle.width = $width;			this.draw( this._objData.rectangle );		}		override public function set height( $height:Number ):void		{			this._objData.rectangle.height = $height;			this.draw( this._objData.rectangle );		} 		/*		Event Handlers		*/		private function onResize($event:Event):void		{			this.draw( this.getStageRectangle() );		}	}}