package com.bedrockframework.engine.manager{	/*	Imports	*/	import com.bedrockframework.core.base.StandardWidget;	import com.bedrockframework.engine.api.IAssetManager;	import com.bedrockframework.plugin.storage.HashMap;	import com.bedrockframework.plugin.util.ArrayUtil;		import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.media.Sound;	import flash.system.ApplicationDomain;	/*	Class Declaration	*/	public class AssetManager extends StandardWidget implements IAssetManager	{		/*		* Variable Declarations		*/		public static var VIEWS:String = "views";		public static var PRELOADERS:String = "preloaders";		public static var BITMAPS:String = "bitmaps";		public static var SOUNDS:String = "sounds";				private var _arrViews:Array;		private var _arrPreloaders:Array;		private var _arrBitmaps:Array;		private var _arrSounds:Array;		private var _mapCollections:HashMap;		private var _objApplicationDomain:ApplicationDomain;		/*		Initialize the class		*/		public function AssetManager()		{			this._arrViews = new Array;			this._arrPreloaders = new Array;			this._arrBitmaps = new Array;			this._arrSounds = new Array;						this._mapCollections = new HashMap;			this._mapCollections.saveValue(AssetManager.VIEWS, this._arrViews);			this._mapCollections.saveValue(AssetManager.PRELOADERS, this._arrPreloaders);			this._mapCollections.saveValue(AssetManager.BITMAPS, this._arrBitmaps);			this._mapCollections.saveValue(AssetManager.SOUNDS, this._arrSounds);		}		public function initialize( $applicationDomain:ApplicationDomain ):void		{			this._objApplicationDomain = $applicationDomain;		}		/*		Manage Classes		*/		private function registerAsset($type:String, $name:String ):void		{			this.getCollection($type).push( $name );		}		private function getAsset( $type:String, $name:String ):Class		{			return this._objApplicationDomain.getDefinition( $name ) as Class;		}		private function getCollection( $type:String ):Array		{			return this._mapCollections.getValue( $type );		}		private function getInstanceCollection($type:String, $creator:Function):Array		{			var arrReturn:Array = new Array;			var arrCollection:Array = this.getCollection($type);						var numLength:int = arrCollection.length;			for (var i:int = 0 ; i < numLength; i++) {				arrReturn.push( { alias:arrCollection[ i ], value:$creator( arrCollection[ i ] ) } );			}			return arrReturn;		}		/*		Add/ Return new preloader instance		*/		public function addPreloader( $alias:String ):void		{			this.registerAsset( AssetManager.PRELOADERS, $alias );		}		public function getPreloader( $name:String ):MovieClip		{			var ClassReference:Class = this.getAsset( AssetManager.PRELOADERS, $name );			return new ClassReference;		}		public function hasPreloader($name:String):Boolean		{			return ArrayUtil.containsItem( this.getCollection( AssetManager.PRELOADERS ), $name );		}		/*		Add/ Return new view instance		*/		public function addView($name:String ):void		{			this.registerAsset( AssetManager.VIEWS, $name );		}		public function getView($name:String):*		{			var ClassReference:Class = this.getAsset( AssetManager.VIEWS, $name );			return new ClassReference;		}		public function hasView( $name:String ):Boolean		{			return ArrayUtil.containsItem( this.getCollection(AssetManager.VIEWS), $name );		}		public function getViews():Array		{			return this.getInstanceCollection(AssetManager.VIEWS, this.getView);		}		/*		Add/ Return new bitmap instance		*/		public function addBitmap( $name:String ):void		{			this.registerAsset(AssetManager.BITMAPS, $name );		}		public function getBitmap( $name:String ):BitmapData		{			var ClassReference:Class = this.getAsset(AssetManager.BITMAPS, $name);			return new ClassReference(0, 0);		}		public function hasBitmap( $name:String ):Boolean		{			return ArrayUtil.containsItem( this.getCollection(AssetManager.BITMAPS), $name );		}		public function getBitmaps():Array		{			return this.getInstanceCollection(AssetManager.BITMAPS, this.getBitmap);		}		/*		Add/ Return new sound instance		*/		public function addSound( $name:String ):void		{			this.registerAsset(AssetManager.SOUNDS, $name );		}		public function getSound( $name:String ):Sound		{			var ClassReference:Class = this.getAsset(AssetManager.SOUNDS, $name);			return new ClassReference;		}		public function hasSound( $name:String ):Boolean		{			return ArrayUtil.containsItem(this.getCollection(AssetManager.SOUNDS), $name);		}		public function getSounds():Array
		{
			return this.getInstanceCollection(AssetManager.SOUNDS, this.getSound);
		}	}}