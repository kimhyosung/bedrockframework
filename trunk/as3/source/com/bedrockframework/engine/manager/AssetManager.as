package com.bedrockframework.engine.manager{	/*	Imports	*/	import com.bedrockframework.core.base.StandardWidget;	import com.bedrockframework.core.util.ClassUtil;	import com.bedrockframework.engine.api.IAssetManager;	import com.bedrockframework.plugin.storage.HashMap;	import com.bedrockframework.plugin.util.ArrayUtil;		import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.media.Sound;	import flash.net.getClassByAlias;	import flash.net.registerClassAlias;	/*	Class Declaration	*/	public class AssetManager extends StandardWidget implements IAssetManager	{		/*		* Variable Declarations		*/		public static var VIEWS:String = "views";		public static var PRELOADERS:String = "preloaders";		public static var BITMAPS:String = "bitmaps";		public static var SOUNDS:String = "sounds";				private var _arrViews:Array;		private var _arrPreloaders:Array;		private var _arrBitmaps:Array;		private var _arrSounds:Array;		private var _mapCollections:HashMap;		/*		Initialize the class		*/		public function AssetManager()		{			this._arrViews = new Array;			this._arrPreloaders = new Array;			this._arrBitmaps = new Array;			this._arrSounds = new Array;						this._mapCollections = new HashMap;			this._mapCollections.saveValue(AssetManager.VIEWS, this._arrViews);			this._mapCollections.saveValue(AssetManager.PRELOADERS, this._arrPreloaders);			this._mapCollections.saveValue(AssetManager.BITMAPS, this._arrBitmaps);			this._mapCollections.saveValue(AssetManager.SOUNDS, this._arrSounds);		}		/*		Manage Classes		*/		private function registerClass($type:String, $alias:String, $class:Class):void		{			this.getCollection($type).push($alias);			registerClassAlias($alias, $class);		}		private function getClass($alias:String):Class		{			return getClassByAlias($alias);		}		private function getCollection($type:String):Array		{			return this._mapCollections.getValue($type);		}		private function getInstanceCollection($type:String, $creator:Function):Array		{			var arrReturn:Array = new Array;			var arrCollection:Array = this.getCollection($type);						var numLength:int = arrCollection.length;			for (var i:int = 0 ; i < numLength; i++) {				arrReturn.push({alias:arrCollection[i], value:$creator(arrCollection[i])});			}			return arrReturn;		}		/*		Add/ Return new preloader instance		*/		public function addPreloader($alias:String, $class:Class):void		{			this.registerClass(AssetManager.PRELOADERS, $alias, $class);		}		public function getPreloader($alias:String):MovieClip		{			var ClassReference:Class = this.getClass($alias);			return new ClassReference;		}		public function hasPreloader($alias:String):Boolean		{			return ArrayUtil.containsItem(this.getCollection(AssetManager.PRELOADERS), $alias);		}		/*		Add/ Return new view instance		*/		public function addView($alias:String, $class:Class):void		{			this.registerClass(AssetManager.VIEWS, $alias, $class);		}		public function getView($alias:String):*		{			var ClassReference:Class = this.getClass($alias);			return new ClassReference;		}		public function hasView($alias:String):Boolean		{			return ArrayUtil.containsItem(this.getCollection(AssetManager.VIEWS), $alias);		}		public function getViews():Array		{			return this.getInstanceCollection(AssetManager.VIEWS, this.getView);		}		/*		Add/ Return new bitmap instance		*/		public function addBitmap($alias:String, $class:Class):void		{			this.registerClass(AssetManager.BITMAPS, $alias, $class);		}		public function getBitmap($alias:String):BitmapData		{			var ClassReference:Class = this.getClass($alias);			return new ClassReference(0, 0);		}		public function hasBitmap($alias:String):Boolean		{			return ArrayUtil.containsItem(this.getCollection(AssetManager.BITMAPS), $alias);		}		public function getBitmaps():Array		{			return this.getInstanceCollection(AssetManager.BITMAPS, this.getBitmap);		}		/*		Add/ Return new sound instance		*/		public function addSound($alias:String, $class:Class):void		{			this.registerClass(AssetManager.SOUNDS, $alias, $class);		}		public function getSound($alias:String):Sound		{			var ClassReference:Class = this.getClass($alias);			return new ClassReference;		}		public function hasSound($alias:String):Boolean		{			return ArrayUtil.containsItem(this.getCollection(AssetManager.SOUNDS), $alias);		}		public function getSounds():Array
		{
			return this.getInstanceCollection(AssetManager.SOUNDS, this.getSound);
		}	}}